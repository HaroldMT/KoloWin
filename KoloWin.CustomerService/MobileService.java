package com.Wsdl2Code.WebServices.MobileService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 6/3/2018 12:45:12 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.MobileService.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class MobileService {
    
    public String NAMESPACE ="http://kolo.cyberix.fr/";
    public String url="";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public MobileService(){}
    
    public MobileService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public MobileService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public MobileService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void GetRefGenderAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRefGenderAsync(null);
    }
    
    public void GetRefGenderAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RefGender>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RefGender doInBackground(Void... params) {
                return GetRefGender(headers);
            }
            @Override
            protected void onPostExecute(RefGender result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetRefGender", result);
                }
            }
        }.execute();
    }
    
    public RefGender GetRefGender(){
        return GetRefGender(null);
    }
    
    public RefGender GetRefGender(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/","GetRefGender");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://kolo.cyberix.fr/GetRefGender", soapEnvelope,headers);
            }else{
                httpTransport.call("http://kolo.cyberix.fr/GetRefGender", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RefGender resultVariable =  new RefGender (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CreatePersonAsync(String jsonPerson) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CreatePersonAsync(jsonPerson, null);
    }
    
    public void CreatePersonAsync(final String jsonPerson,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                CreatePerson(jsonPerson, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CreatePerson", result);
                }
            }
        }.execute();
    }
    
    public void CreatePerson(String jsonPerson){
        CreatePerson(jsonPerson, null);
    }
    
    public void CreatePerson(String jsonPerson,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/","CreatePerson");
        soapReq.addProperty("jsonPerson",jsonPerson);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://kolo.cyberix.fr/CreatePerson", soapEnvelope,headers);
            }else{
                httpTransport.call("http://kolo.cyberix.fr/CreatePerson", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void TestServiceAsync(MyRefTypes myRefTypes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestServiceAsync(myRefTypes, null);
    }
    
    public void TestServiceAsync(final MyRefTypes myRefTypes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, MyRefTypes>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected MyRefTypes doInBackground(Void... params) {
                return TestService(myRefTypes, headers);
            }
            @Override
            protected void onPostExecute(MyRefTypes result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TestService", result);
                }
            }
        }.execute();
    }
    
    public MyRefTypes TestService(MyRefTypes myRefTypes){
        return TestService(myRefTypes, null);
    }
    
    public MyRefTypes TestService(MyRefTypes myRefTypes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/","TestService");
        soapEnvelope.addMapping("http://kolo.cyberix.fr/","myRefTypes",new MyRefTypes().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("myRefTypes",myRefTypes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://kolo.cyberix.fr/TestService", soapEnvelope,headers);
            }else{
                httpTransport.call("http://kolo.cyberix.fr/TestService", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    MyRefTypes resultVariable =  new MyRefTypes (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertMobileDeviceAsync(String jsonMobileDevice) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertMobileDeviceAsync(jsonMobileDevice, null);
    }
    
    public void InsertMobileDeviceAsync(final String jsonMobileDevice,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, MobileDevice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected MobileDevice doInBackground(Void... params) {
                return InsertMobileDevice(jsonMobileDevice, headers);
            }
            @Override
            protected void onPostExecute(MobileDevice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertMobileDevice", result);
                }
            }
        }.execute();
    }
    
    public MobileDevice InsertMobileDevice(String jsonMobileDevice){
        return InsertMobileDevice(jsonMobileDevice, null);
    }
    
    public MobileDevice InsertMobileDevice(String jsonMobileDevice,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/","InsertMobileDevice");
        soapReq.addProperty("jsonMobileDevice",jsonMobileDevice);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://kolo.cyberix.fr/InsertMobileDevice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://kolo.cyberix.fr/InsertMobileDevice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    MobileDevice resultVariable =  new MobileDevice (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
